package uk.gov.nationalarchives.db

import slick.jdbc.PostgresProfile.api._
import slick.lifted.TableQuery
import uk.gov.nationalarchives.model.Consignment

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

class ConsignmentDao {
  // Slick requires every non-nullable column to have a value on insert, even the ID column, so provide an arbitrary
  // ID which will be overwritten by the auto-incrementing value generated by PostgreSQL
  private val dummyId = 0

  // Load PostgreSQL driver into classpath
  Class.forName("org.postgresql.Driver")

  private val dbConfig = sys.env.get("TDR_API_ENVIRONMENT") match {
    case Some("TEST") => PrototypeDbConfig
    case _ => DevDbConfig
  }

  val db = Database.forURL(
    url = dbConfig.url,
    user = dbConfig.username,
    password = dbConfig.password,
    driver = "org.postgresql.Driver"
  )

  val consignments = TableQuery[Consignments]

  def all: Future[Seq[Consignment]] = {
    db.run(consignments.result).map(results => {
      results.map(result => Consignment(Some(result._1), result._2))
    })
  }

  def get(id: Int): Future[Option[Consignment]] = {
    db.run(consignments.filter(_.id === id).result).map(results => {
      results.headOption.map(result => Consignment(Some(result._1), result._2))
    })
  }

  def create(consignment: Consignment): Future[Consignment] = {
    // TODO: Examples use case class rather than tuple. How?
    val insertQuery = consignments returning consignments.map(_.id) into ((consignment, id) => (id, consignment._2))

    val insertAction = insertQuery += (dummyId, consignment.name)
    db.run(insertAction).map(result => {
      Consignment(Some(result._1), result._2)
    })
  }
}

class Consignments(tag: Tag) extends Table[(Int, String)](tag, "consignments") {
  def id = column[Int]("id", O.PrimaryKey, O.AutoInc)
  def name = column[String]("name")

  override def * = (id, name)
}